// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using AtlasERP.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace AtlasERP.Models
{
    public partial class atlasErpContext
    {
        private IatlasErpContextProcedures _procedures;

        public virtual IatlasErpContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new atlasErpContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IatlasErpContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CantidadAgenMaquiResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CrearCuentaHelpDeskResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<detalleCronoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<detalleCronoUnitResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ImgProductResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<LoginCLientResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<MaquinariaAgenciaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<MaquinariaBodegaClienteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObetenerTecnicoProvinciasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtebnerVentasCabTranResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerAgenciasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<obtenerAgenciasCardinalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerAgenciasLocalidadResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerAsignacionTecnicoReuqerimientoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerBodegasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerCantidadAgenciasProvResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerCLientesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerConsumoAppResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerContratosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerCotizacionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerCronoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerDatosGeneralesPuntoVentaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerEmpresaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<obtenerGruposMarcasMaqResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerItemsBodegasResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerMaquinariaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerMaquinasSinBodegaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerMaquinaUnitResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerMedicamentosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerMensajesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerMensajesTIcketResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerModulosEstantesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerPuntosDeVentaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerRepuestosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerRepuestosRequerimientosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerTecniCronoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerTicketsRequerimientosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerUsuariosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerUsuarioUnitResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ObtenerVentasDetTranResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<obtenerVentasPosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<RepoOrdenTransferProdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReporteMantenimientoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReporteTecnicoCorrectivoResult>().HasNoKey().ToView(null);
        }
    }

    public partial class atlasErpContextProcedures : IatlasErpContextProcedures
    {
        private readonly atlasErpContext _context;

        public atlasErpContextProcedures(atlasErpContext context)
        {
            _context = context;
        }

        public virtual async Task<int> ActualizarAgenciaEstadoAsync(int? st, string codAgencia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "st",
                    Value = st ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "codAgencia",
                    Size = 40,
                    Value = codAgencia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ActualizarAgenciaEstado] @st, @codAgencia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> calculoAsignacionCronogramaAsync(string codFecuency, string codcrono, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codFecuency",
                    Size = 3,
                    Value = codFecuency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codcrono",
                    Size = 35,
                    Value = codcrono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[calculoAsignacionCronograma] @codFecuency, @codcrono", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CambioEstadosAsync(string codMensaje, int? state, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codMensaje",
                    Size = 50,
                    Value = codMensaje ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CambioEstados] @codMensaje, @state", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CantidadAgenMaquiResult>> CantidadAgenMaquiAsync(string type, string filter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 50,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Size = 500,
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CantidadAgenMaquiResult>("EXEC @returnValue = [dbo].[CantidadAgenMaqui] @type, @filter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> cierrePuntoVentaAsync(int? ID, int? ccia, string observacion, DateTime? fecierre, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "observacion",
                    Size = 300,
                    Value = observacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fecierre",
                    Value = fecierre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[cierrePuntoVenta] @ID, @ccia, @observacion, @fecierre", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CliBodegAsignAsync(string codcli, int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codcli",
                    Size = 30,
                    Value = codcli ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CliBodegAsign] @codcli, @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CrearCuentaAsync(string codUser, string codCia, string tipoCuenta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codUser",
                    Size = 30,
                    Value = codUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codCia",
                    Size = 30,
                    Value = codCia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipoCuenta",
                    Size = 30,
                    Value = tipoCuenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CrearCuenta] @codUser, @codCia, @tipoCuenta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CrearCuentaHelpDeskResult>> CrearCuentaHelpDeskAsync(string codCli, string codcia, string rol, string nombre, string apellido, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codCli",
                    Size = 40,
                    Value = codCli ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codcia",
                    Size = 20,
                    Value = codcia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rol",
                    Size = 1,
                    Value = rol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "nombre",
                    Size = 200,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "apellido",
                    Size = 200,
                    Value = apellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CrearCuentaHelpDeskResult>("EXEC @returnValue = [dbo].[CrearCuentaHelpDesk] @codCli, @codcia, @rol, @nombre, @apellido", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<detalleCronoResult>> detalleCronoAsync(int? tipo, string idcrono, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tipo",
                    Value = tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idcrono",
                    Size = 50,
                    Value = idcrono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<detalleCronoResult>("EXEC @returnValue = [dbo].[detalleCrono] @tipo, @idcrono", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<detalleCronoUnitResult>> detalleCronoUnitAsync(int? tipo, string identidad, int? mes, int? dia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tipo",
                    Value = tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "identidad",
                    Size = 50,
                    Value = identidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mes",
                    Value = mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dia",
                    Value = dia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<detalleCronoUnitResult>("EXEC @returnValue = [dbo].[detalleCronoUnit] @tipo, @identidad, @mes, @dia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EliminarMaquinariaAsync(string codEntidad, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codEntidad",
                    Size = 60,
                    Value = codEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EliminarMaquinaria] @codEntidad", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> generarCronogramaAsync(int? mes, int? anio, string agencia, string usertecnic, int? codLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "mes",
                    Value = mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "anio",
                    Value = anio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "agencia",
                    Size = 30,
                    Value = agencia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "usertecnic",
                    Size = 30,
                    Value = usertecnic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codLocal",
                    Value = codLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[generarCronograma] @mes, @anio, @agencia, @usertecnic, @codLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMGGeneralControlAsync(string codentidad, string IMG, string tipoImagen, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codentidad",
                    Size = 45,
                    Value = codentidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IMG",
                    Size = -1,
                    Value = IMG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipoImagen",
                    Size = 150,
                    Value = tipoImagen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMGGeneralControl] @codentidad, @IMG, @tipoImagen", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ImgProductResult>> ImgProductAsync(string codmaquina, string img, string type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codmaquina",
                    Size = 30,
                    Value = codmaquina ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "img",
                    Size = -1,
                    Value = img ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 11,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ImgProductResult>("EXEC @returnValue = [dbo].[ImgProduct] @codmaquina, @img, @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LoginCLientResult>> LoginCLientAsync(string email, string password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 200,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 500,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LoginCLientResult>("EXEC @returnValue = [dbo].[LoginCLient] @email, @password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MaquinariaAgenciaResult>> MaquinariaAgenciaAsync(string filter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filter",
                    Size = 200,
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MaquinariaAgenciaResult>("EXEC @returnValue = [dbo].[MaquinariaAgencia] @filter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MaquinariaBodegaClienteResult>> MaquinariaBodegaClienteAsync(string codcliente, string ccia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codcliente",
                    Size = 30,
                    Value = codcliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 30,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MaquinariaBodegaClienteResult>("EXEC @returnValue = [dbo].[MaquinariaBodegaCliente] @codcliente, @ccia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObetenerTecnicoProvinciasResult>> ObetenerTecnicoProvinciasAsync(string ccuser, string ccia, int? tp, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccuser",
                    Size = 25,
                    Value = ccuser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 20,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tp",
                    Value = tp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObetenerTecnicoProvinciasResult>("EXEC @returnValue = [dbo].[ObetenerTecnicoProvincias] @ccuser, @ccia, @tp", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtebnerVentasCabTranResult>> ObtebnerVentasCabTranAsync(int? idCab, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idCab",
                    Value = idCab ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtebnerVentasCabTranResult>("EXEC @returnValue = [dbo].[ObtebnerVentasCabTran] @idCab", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerAgenciasResult>> ObtenerAgenciasAsync(string ccia, string filter, string codProv, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 20,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Size = 30,
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codProv",
                    Size = 10,
                    Value = codProv ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerAgenciasResult>("EXEC @returnValue = [dbo].[ObtenerAgencias] @ccia, @filter, @codProv", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<obtenerAgenciasCardinalResult>> obtenerAgenciasCardinalAsync(string ccli, string ccia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccli",
                    Size = 45,
                    Value = ccli ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 25,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<obtenerAgenciasCardinalResult>("EXEC @returnValue = [dbo].[obtenerAgenciasCardinal] @ccli, @ccia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerAgenciasLocalidadResult>> ObtenerAgenciasLocalidadAsync(int? localidadId, string zonificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "localidadId",
                    Value = localidadId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "zonificacion",
                    Size = 3,
                    Value = zonificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerAgenciasLocalidadResult>("EXEC @returnValue = [dbo].[ObtenerAgenciasLocalidad] @localidadId, @zonificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerAsignacionTecnicoReuqerimientoResult>> ObtenerAsignacionTecnicoReuqerimientoAsync(int? idRequer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idRequer",
                    Value = idRequer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerAsignacionTecnicoReuqerimientoResult>("EXEC @returnValue = [dbo].[ObtenerAsignacionTecnicoReuqerimiento] @idRequer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerBodegasResult>> ObtenerBodegasAsync(string ccia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 30,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerBodegasResult>("EXEC @returnValue = [dbo].[ObtenerBodegas] @ccia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerCantidadAgenciasProvResult>> ObtenerCantidadAgenciasProvAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerCantidadAgenciasProvResult>("EXEC @returnValue = [dbo].[ObtenerCantidadAgenciasProv]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerCLientesResult>> ObtenerCLientesAsync(string ccia, int? type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 20,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerCLientesResult>("EXEC @returnValue = [dbo].[ObtenerCLientes] @ccia, @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerConsumoAppResult>> ObtenerConsumoAppAsync(int? tipo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tipo",
                    Value = tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerConsumoAppResult>("EXEC @returnValue = [dbo].[ObtenerConsumoApp] @tipo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerContratosResult>> ObtenerContratosAsync(string codcia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codcia",
                    Size = 20,
                    Value = codcia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerContratosResult>("EXEC @returnValue = [dbo].[ObtenerContratos] @codcia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerCotizacionResult>> ObtenerCotizacionAsync(int? idTicket, string codcia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idTicket",
                    Value = idTicket ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "codcia",
                    Size = 30,
                    Value = codcia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerCotizacionResult>("EXEC @returnValue = [dbo].[ObtenerCotizacion] @idTicket, @codcia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerCronoResult>> ObtenerCronoAsync(string ccia, int? anio, int? mes, int? localidad, int? tipo, string userTecnic, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 20,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "anio",
                    Value = anio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mes",
                    Value = mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "localidad",
                    Value = localidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tipo",
                    Value = tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userTecnic",
                    Size = 40,
                    Value = userTecnic ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerCronoResult>("EXEC @returnValue = [dbo].[ObtenerCrono] @ccia, @anio, @mes, @localidad, @tipo, @userTecnic", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerDatosGeneralesPuntoVentaResult>> ObtenerDatosGeneralesPuntoVentaAsync(int? idPvo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idPvo",
                    Value = idPvo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerDatosGeneralesPuntoVentaResult>("EXEC @returnValue = [dbo].[ObtenerDatosGeneralesPuntoVenta] @idPvo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerEmpresaResult>> ObtenerEmpresaAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerEmpresaResult>("EXEC @returnValue = [dbo].[ObtenerEmpresa]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<obtenerGruposMarcasMaqResult>> obtenerGruposMarcasMaqAsync(string codigo, string codMarca, int? tipo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codigo",
                    Size = 10,
                    Value = codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codMarca",
                    Size = 10,
                    Value = codMarca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipo",
                    Value = tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<obtenerGruposMarcasMaqResult>("EXEC @returnValue = [dbo].[obtenerGruposMarcasMaq] @codigo, @codMarca, @tipo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerItemsBodegasResult>> ObtenerItemsBodegasAsync(int? codbodega, int? state, int? type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codbodega",
                    Value = codbodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerItemsBodegasResult>("EXEC @returnValue = [dbo].[ObtenerItemsBodegas] @codbodega, @state, @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerMaquinariaResult>> ObtenerMaquinariaAsync(string codcia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codcia",
                    Size = 20,
                    Value = codcia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerMaquinariaResult>("EXEC @returnValue = [dbo].[ObtenerMaquinaria] @codcia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerMaquinasSinBodegaResult>> ObtenerMaquinasSinBodegaAsync(string codcia, int? option, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codcia",
                    Size = 30,
                    Value = codcia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "option",
                    Value = option ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerMaquinasSinBodegaResult>("EXEC @returnValue = [dbo].[ObtenerMaquinasSinBodega] @codcia, @option", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerMaquinaUnitResult>> ObtenerMaquinaUnitAsync(string tpm, string mc, string mod, int? tp, string codmaq, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tpm",
                    Size = 3,
                    Value = tpm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mc",
                    Size = 3,
                    Value = mc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "mod",
                    Size = 3,
                    Value = mod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "tp",
                    Value = tp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "codmaq",
                    Size = 30,
                    Value = codmaq ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerMaquinaUnitResult>("EXEC @returnValue = [dbo].[ObtenerMaquinaUnit] @tpm, @mc, @mod, @tp, @codmaq", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerMedicamentosResult>> ObtenerMedicamentosAsync(string codcia, int? type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codcia",
                    Size = 30,
                    Value = codcia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerMedicamentosResult>("EXEC @returnValue = [dbo].[ObtenerMedicamentos] @codcia, @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerMensajesResult>> ObtenerMensajesAsync(string codUser, int? tipo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codUser",
                    Size = 30,
                    Value = codUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipo",
                    Value = tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerMensajesResult>("EXEC @returnValue = [dbo].[ObtenerMensajes] @codUser, @tipo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerMensajesTIcketResult>> ObtenerMensajesTIcketAsync(int? idRequerimiento, int? top, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idRequerimiento",
                    Value = idRequerimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "top",
                    Value = top ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerMensajesTIcketResult>("EXEC @returnValue = [dbo].[ObtenerMensajesTIcket] @idRequerimiento, @top", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerModulosEstantesResult>> ObtenerModulosEstantesAsync(int? idEstante, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEstante",
                    Value = idEstante ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerModulosEstantesResult>("EXEC @returnValue = [dbo].[ObtenerModulosEstantes] @idEstante", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerPuntosDeVentaResult>> ObtenerPuntosDeVentaAsync(string ccia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 30,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerPuntosDeVentaResult>("EXEC @returnValue = [dbo].[ObtenerPuntosDeVenta] @ccia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerRepuestosResult>> ObtenerRepuestosAsync(string usercrea, string codcia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "usercrea",
                    Size = 35,
                    Value = usercrea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codcia",
                    Size = 15,
                    Value = codcia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerRepuestosResult>("EXEC @returnValue = [dbo].[ObtenerRepuestos] @usercrea, @codcia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerRepuestosRequerimientosResult>> ObtenerRepuestosRequerimientosAsync(int? idRequer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idRequer",
                    Value = idRequer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerRepuestosRequerimientosResult>("EXEC @returnValue = [dbo].[ObtenerRepuestosRequerimientos] @idRequer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerTecniCronoResult>> ObtenerTecniCronoAsync(int? idlocalidad, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idlocalidad",
                    Value = idlocalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerTecniCronoResult>("EXEC @returnValue = [dbo].[ObtenerTecniCrono] @idlocalidad", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerTicketsRequerimientosResult>> ObtenerTicketsRequerimientosAsync(string codcli, string ccia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codcli",
                    Size = 40,
                    Value = codcli ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 15,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerTicketsRequerimientosResult>("EXEC @returnValue = [dbo].[ObtenerTicketsRequerimientos] @codcli, @ccia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerUsuariosResult>> ObtenerUsuariosAsync(string codCia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codCia",
                    Size = 25,
                    Value = codCia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerUsuariosResult>("EXEC @returnValue = [dbo].[ObtenerUsuarios] @codCia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerUsuarioUnitResult>> ObtenerUsuarioUnitAsync(string coduser, string email, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "coduser",
                    Size = 45,
                    Value = coduser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 500,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerUsuarioUnitResult>("EXEC @returnValue = [dbo].[ObtenerUsuarioUnit] @coduser, @email", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ObtenerVentasDetTranResult>> ObtenerVentasDetTranAsync(string type, int? idcab, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 15,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idcab",
                    Value = idcab ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ObtenerVentasDetTranResult>("EXEC @returnValue = [dbo].[ObtenerVentasDetTran] @type, @idcab", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<obtenerVentasPosResult>> obtenerVentasPosAsync(string ccia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 30,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<obtenerVentasPosResult>("EXEC @returnValue = [dbo].[obtenerVentasPos] @ccia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ProcesoTransdferenciaBodAsync(string codprod, int? state, string codusercrea, int? boden, int? bodsal, string ccia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codprod",
                    Size = 30,
                    Value = codprod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "state",
                    Value = state ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "codusercrea",
                    Size = 30,
                    Value = codusercrea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "boden",
                    Value = boden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bodsal",
                    Value = bodsal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 30,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ProcesoTransdferenciaBod] @codprod, @state, @codusercrea, @boden, @bodsal, @ccia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RepoOrdenTransferProdResult>> RepoOrdenTransferProdAsync(string ccia, string codcab, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ccia",
                    Size = 30,
                    Value = ccia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codcab",
                    Size = 35,
                    Value = codcab ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RepoOrdenTransferProdResult>("EXEC @returnValue = [dbo].[RepoOrdenTransferProd] @ccia, @codcab", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReporteMantenimientoResult>> ReporteMantenimientoAsync(string tipoentidad, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tipoentidad",
                    Size = 200,
                    Value = tipoentidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReporteMantenimientoResult>("EXEC @returnValue = [dbo].[ReporteMantenimiento] @tipoentidad", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReporteTecnicoCorrectivoResult>> ReporteTecnicoCorrectivoAsync(int? idTicket, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idTicket",
                    Value = idTicket ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReporteTecnicoCorrectivoResult>("EXEC @returnValue = [dbo].[ReporteTecnicoCorrectivo] @idTicket", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_ActualizarProductoMedicamentoAsync(int? idProducto, string nombre, string principioActivo, string concentracion, string formaFarmaceutica, string presentacion, string laboratorioFabricante, string paisOrigen, string registroSanitario, string lote, DateTime? fechaFabricacion, DateTime? fechaCaducidad, string tipoMedicamento, string viaAdministracion, string indicaciones, string contraindicaciones, string efectosSecundarios, int? cantidadStock, string ubicacionAlmacen, string temperaturaAlmacenamiento, int? minimoStock, decimal? precioUnitario, bool? requiereReceta, string codigoBarras, string imagenProducto, int? idPuntoVenta, string instruccionesUso, decimal? valorBlister, decimal? valorCaja, string observacion, decimal? precioCompra, decimal? descuento, decimal? oImp, decimal? contNeto, string userRegister, string unidadMedida, string codcia, string categoria, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idProducto",
                    Value = idProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nombre",
                    Size = 100,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "principioActivo",
                    Size = 100,
                    Value = principioActivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "concentracion",
                    Size = 300,
                    Value = concentracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "formaFarmaceutica",
                    Size = 200,
                    Value = formaFarmaceutica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "presentacion",
                    Size = 100,
                    Value = presentacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "laboratorioFabricante",
                    Size = 100,
                    Value = laboratorioFabricante ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "paisOrigen",
                    Size = 50,
                    Value = paisOrigen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "registroSanitario",
                    Size = 50,
                    Value = registroSanitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lote",
                    Size = 50,
                    Value = lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fechaFabricacion",
                    Value = fechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "fechaCaducidad",
                    Value = fechaCaducidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "tipoMedicamento",
                    Size = 50,
                    Value = tipoMedicamento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "viaAdministracion",
                    Size = 50,
                    Value = viaAdministracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "indicaciones",
                    Size = -1,
                    Value = indicaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "contraindicaciones",
                    Size = -1,
                    Value = contraindicaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "efectosSecundarios",
                    Size = -1,
                    Value = efectosSecundarios ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cantidadStock",
                    Value = cantidadStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ubicacionAlmacen",
                    Size = 100,
                    Value = ubicacionAlmacen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "temperaturaAlmacenamiento",
                    Size = 50,
                    Value = temperaturaAlmacenamiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minimoStock",
                    Value = minimoStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "precioUnitario",
                    Precision = 10,
                    Scale = 2,
                    Value = precioUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "requiereReceta",
                    Value = requiereReceta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "codigoBarras",
                    Size = 50,
                    Value = codigoBarras ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "imagenProducto",
                    Size = 255,
                    Value = imagenProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idPuntoVenta",
                    Value = idPuntoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "instruccionesUso",
                    Size = -1,
                    Value = instruccionesUso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "valorBlister",
                    Precision = 10,
                    Scale = 2,
                    Value = valorBlister ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "valorCaja",
                    Precision = 10,
                    Scale = 2,
                    Value = valorCaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "observacion",
                    Size = 300,
                    Value = observacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "precioCompra",
                    Precision = 10,
                    Scale = 2,
                    Value = precioCompra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "descuento",
                    Precision = 10,
                    Scale = 2,
                    Value = descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "oImp",
                    Precision = 10,
                    Scale = 2,
                    Value = oImp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "contNeto",
                    Precision = 10,
                    Scale = 2,
                    Value = contNeto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "userRegister",
                    Size = 30,
                    Value = userRegister ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "unidadMedida",
                    Size = 3,
                    Value = unidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "codcia",
                    Size = 30,
                    Value = codcia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "categoria",
                    Size = 3,
                    Value = categoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_ActualizarProductoMedicamento] @idProducto, @nombre, @principioActivo, @concentracion, @formaFarmaceutica, @presentacion, @laboratorioFabricante, @paisOrigen, @registroSanitario, @lote, @fechaFabricacion, @fechaCaducidad, @tipoMedicamento, @viaAdministracion, @indicaciones, @contraindicaciones, @efectosSecundarios, @cantidadStock, @ubicacionAlmacen, @temperaturaAlmacenamiento, @minimoStock, @precioUnitario, @requiereReceta, @codigoBarras, @imagenProducto, @idPuntoVenta, @instruccionesUso, @valorBlister, @valorCaja, @observacion, @precioCompra, @descuento, @oImp, @contNeto, @userRegister, @unidadMedida, @codcia, @categoria", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateEstadoModuloAsync(int? permiso, string idmod, string coduser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "permiso",
                    Value = permiso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idmod",
                    Size = 10,
                    Value = idmod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "coduser",
                    Size = 35,
                    Value = coduser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateEstadoModulo] @permiso, @idmod, @coduser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
