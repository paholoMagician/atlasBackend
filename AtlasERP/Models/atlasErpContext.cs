// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AtlasERP.Models;

public partial class atlasErpContext : DbContext
{
    public atlasErpContext(DbContextOptions<atlasErpContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Agenciagarantium> Agenciagarantia { get; set; }

    public virtual DbSet<Agencium> Agencia { get; set; }

    public virtual DbSet<AperturaPuntoVentum> AperturaPuntoVenta { get; set; }

    public virtual DbSet<Asesorcliente> Asesorclientes { get; set; }

    public virtual DbSet<AsignModUser> AsignModUsers { get; set; }

    public virtual DbSet<AsignRepuRequer> AsignRepuRequers { get; set; }

    public virtual DbSet<AsignacionTecnicoTicket> AsignacionTecnicoTickets { get; set; }

    public virtual DbSet<Asignacionmaquinacliente> Asignacionmaquinaclientes { get; set; }

    public virtual DbSet<Asignacionprovincia> Asignacionprovincias { get; set; }

    public virtual DbSet<AuditApp> AuditApps { get; set; }

    public virtual DbSet<Auditorium> Auditoria { get; set; }

    public virtual DbSet<Bodega> Bodegas { get; set; }

    public virtual DbSet<Cardinal> Cardinals { get; set; }

    public virtual DbSet<Ccium> Ccia { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Contrato> Contratos { get; set; }

    public virtual DbSet<Cronograma> Cronogramas { get; set; }

    public virtual DbSet<Cronograma1> Cronograma1s { get; set; }

    public virtual DbSet<DimDate> DimDates { get; set; }

    public virtual DbSet<Entytrancab> Entytrancabs { get; set; }

    public virtual DbSet<Entytrandet> Entytrandets { get; set; }

    public virtual DbSet<FileControl> FileControls { get; set; }

    public virtual DbSet<FileMediaTicket> FileMediaTickets { get; set; }

    public virtual DbSet<Garantia> Garantias { get; set; }

    public virtual DbSet<ImgFile> ImgFiles { get; set; }

    public virtual DbSet<Instituto> Institutos { get; set; }

    public virtual DbSet<IntervalosTicket> IntervalosTickets { get; set; }

    public virtual DbSet<IntervalosTicketMsj> IntervalosTicketMsjs { get; set; }

    public virtual DbSet<Invmov> Invmovs { get; set; }

    public virtual DbSet<Localidad> Localidads { get; set; }

    public virtual DbSet<Localidadcobertura> Localidadcoberturas { get; set; }

    public virtual DbSet<Mantemaqcro> Mantemaqcros { get; set; }

    public virtual DbSet<Maquinarium> Maquinaria { get; set; }

    public virtual DbSet<Marca> Marcas { get; set; }

    public virtual DbSet<MarcaRepuesto> MarcaRepuestos { get; set; }

    public virtual DbSet<MasterTable> MasterTables { get; set; }

    public virtual DbSet<MensajeriaTicket> MensajeriaTickets { get; set; }

    public virtual DbSet<Mensajerium> Mensajeria { get; set; }

    public virtual DbSet<Modelo> Modelos { get; set; }

    public virtual DbSet<ModeloMarcaRepuesto> ModeloMarcaRepuestos { get; set; }

    public virtual DbSet<ModuleMobile> ModuleMobiles { get; set; }

    public virtual DbSet<Modulo> Modulos { get; set; }

    public virtual DbSet<ModulosEstante> ModulosEstantes { get; set; }

    public virtual DbSet<Prodbodegasigna> Prodbodegasignas { get; set; }

    public virtual DbSet<ProductosMedicamento> ProductosMedicamentos { get; set; }

    public virtual DbSet<PuntoDeVentaEstante> PuntoDeVentaEstantes { get; set; }

    public virtual DbSet<PuntoDeVentum> PuntoDeVenta { get; set; }

    public virtual DbSet<Repbodasigna> Repbodasignas { get; set; }

    public virtual DbSet<Repuesto> Repuestos { get; set; }

    public virtual DbSet<ResumenMantenimiento> ResumenMantenimientos { get; set; }

    public virtual DbSet<TicketRequerimiento> TicketRequerimientos { get; set; }

    public virtual DbSet<Ticketresolucion> Ticketresolucions { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    public virtual DbSet<UsuarioPortalTicket> UsuarioPortalTickets { get; set; }

    public virtual DbSet<VentasposCab> VentasposCabs { get; set; }

    public virtual DbSet<VentasposDet> VentasposDets { get; set; }

    public virtual DbSet<VersionCm> VersionCms { get; set; }

    public virtual DbSet<Versionamiento> Versionamientos { get; set; }

    public virtual DbSet<VwCalendar> VwCalendars { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Agenciagarantium>(entity =>
        {
            entity.ToTable("agenciagarantia");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Codagencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codagencia");
            entity.Property(e => e.Codcia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Codmaq)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codmaq");
            entity.Property(e => e.Coduser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Feccrea)
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
        });

        modelBuilder.Entity<Agencium>(entity =>
        {
            entity.HasKey(e => e.Codagencia).HasName("PK_agencia2");

            entity.ToTable("agencia");

            entity.Property(e => e.Codagencia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("codagencia");
            entity.Property(e => e.CampoA).HasColumnName("campoA");
            entity.Property(e => e.CampoB)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("campoB");
            entity.Property(e => e.Centrocostos).HasColumnName("centrocostos");
            entity.Property(e => e.CodCanton)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codCanton");
            entity.Property(e => e.CodProv)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codProv");
            entity.Property(e => e.Codcia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Codcliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcliente");
            entity.Property(e => e.Codfrecuencia)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codfrecuencia");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.Horarioatenciond)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("horarioatenciond");
            entity.Property(e => e.Horarioatenciondm)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("horarioatenciondm");
            entity.Property(e => e.Horarioatencionh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("horarioatencionh");
            entity.Property(e => e.Horarioatencionhm)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("horarioatencionhm");
            entity.Property(e => e.Latitud)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("latitud");
            entity.Property(e => e.Longitud)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("longitud");
            entity.Property(e => e.Nombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Observacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Tipo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<AperturaPuntoVentum>(entity =>
        {
            entity.ToTable("aperturaPuntoVenta");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.Fecierre)
                .HasColumnType("datetime")
                .HasColumnName("fecierre");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.Idpuntoventa).HasColumnName("idpuntoventa");
            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<Asesorcliente>(entity =>
        {
            entity.ToTable("asesorcliente");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Codcliente)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("codcliente");
            entity.Property(e => e.Coduser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Fecrea)
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<AsignModUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("asignModUser");

            entity.Property(e => e.CodCia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cod_cia");
            entity.Property(e => e.CodMod)
                .HasMaxLength(5)
                .HasColumnName("cod_mod");
            entity.Property(e => e.CodUser)
                .HasMaxLength(30)
                .HasColumnName("cod_user");
            entity.Property(e => e.OrderMod).HasColumnName("order_mod");
            entity.Property(e => e.Permisos).HasColumnName("permisos");
            entity.Property(e => e.State).HasColumnName("state");
        });

        modelBuilder.Entity<AsignRepuRequer>(entity =>
        {
            entity.ToTable("asignRepuRequer");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.Codcia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Codrep)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("codrep");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.IdRequer).HasColumnName("idRequer");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usercrea");
            entity.Property(e => e.ValorFinal)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("valorFinal");
        });

        modelBuilder.Entity<AsignacionTecnicoTicket>(entity =>
        {
            entity.HasKey(e => e.IdAsignacionTecnico);

            entity.ToTable("asignacionTecnicoTicket");

            entity.Property(e => e.IdAsignacionTecnico).HasColumnName("idAsignacionTecnico");
            entity.Property(e => e.CodTenicUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codTenicUser");
            entity.Property(e => e.Fechacrea)
                .HasColumnType("datetime")
                .HasColumnName("fechacrea");
            entity.Property(e => e.Fechares)
                .HasColumnType("datetime")
                .HasColumnName("fechares");
            entity.Property(e => e.IdRequerimiento).HasColumnName("idRequerimiento");
            entity.Property(e => e.Reasignacion).HasColumnName("reasignacion");
            entity.Property(e => e.ResTecnico)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("resTecnico");
            entity.Property(e => e.UrlA)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("urlA");
            entity.Property(e => e.UrlB)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("urlB");
        });

        modelBuilder.Entity<Asignacionmaquinacliente>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_asignacionmaquinacliente1_1");

            entity.ToTable("asignacionmaquinacliente");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.Codagencia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codagencia");
            entity.Property(e => e.Codprod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codprod");
            entity.Property(e => e.Codusercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercrea");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fecasign)
                .HasColumnType("datetime")
                .HasColumnName("fecasign");
            entity.Property(e => e.Observacion)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("observacion");
        });

        modelBuilder.Entity<Asignacionprovincia>(entity =>
        {
            entity.ToTable("asignacionprovincias");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Codcanton)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codcanton");
            entity.Property(e => e.Codcia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Codmantenimiento)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codmantenimiento");
            entity.Property(e => e.Codprov)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codprov");
            entity.Property(e => e.Coduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Codusermod)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("codusermod");
            entity.Property(e => e.Fechainicio)
                .HasColumnType("datetime")
                .HasColumnName("fechainicio");
            entity.Property(e => e.Fechamod)
                .HasColumnType("datetime")
                .HasColumnName("fechamod");
        });

        modelBuilder.Entity<AuditApp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AuditApp1");

            entity.ToTable("AuditApp");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Api)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("api");
            entity.Property(e => e.Coduser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.ConsumoMb)
                .HasColumnType("decimal(10, 10)")
                .HasColumnName("consumoMb");
            entity.Property(e => e.Fechaconsumo)
                .HasColumnType("datetime")
                .HasColumnName("fechaconsumo");
            entity.Property(e => e.Ip)
                .HasMaxLength(500)
                .IsFixedLength()
                .HasColumnName("IP");
            entity.Property(e => e.Method)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("method");
            entity.Property(e => e.Milisegundos).HasColumnName("milisegundos");
        });

        modelBuilder.Entity<Auditorium>(entity =>
        {
            entity.HasKey(e => e.Codaudit);

            entity.ToTable("auditoria");

            entity.Property(e => e.Codaudit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codaudit");
            entity.Property(e => e.Accion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("accion");
            entity.Property(e => e.Cod)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("cod");
            entity.Property(e => e.Codmodulo).HasColumnName("codmodulo");
            entity.Property(e => e.Codusuario)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusuario");
            entity.Property(e => e.Fecfinal)
                .HasColumnType("datetime")
                .HasColumnName("fecfinal");
            entity.Property(e => e.Fecinteraccion)
                .HasColumnType("datetime")
                .HasColumnName("fecinteraccion");
            entity.Property(e => e.Informacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("informacion");
            entity.Property(e => e.Ip)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ip");
        });

        modelBuilder.Entity<Bodega>(entity =>
        {
            entity.ToTable("bodegas");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.Ccli)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccli");
            entity.Property(e => e.Codusercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercrea");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Fecrea)
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.Nombrebodega)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombrebodega");
        });

        modelBuilder.Entity<Cardinal>(entity =>
        {
            entity.ToTable("cardinal");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CampoA)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("campoA");
            entity.Property(e => e.CampoB).HasColumnName("campoB");
            entity.Property(e => e.Codagencia)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("codagencia");
            entity.Property(e => e.Codtecnico)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("codtecnico");
            entity.Property(e => e.Codusercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercrea");
            entity.Property(e => e.Feccrea)
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.Idlocalidad).HasColumnName("idlocalidad");
            entity.Property(e => e.Nombrelocalizacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombrelocalizacion");
        });

        modelBuilder.Entity<Ccium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ccia1");

            entity.ToTable("ccia");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Direccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Iva)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("iva");
            entity.Property(e => e.Logotipo)
                .IsUnicode(false)
                .HasColumnName("logotipo");
            entity.Property(e => e.Nombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Ruc)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ruc");
            entity.Property(e => e.Telf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("telf");
            entity.Property(e => e.Type)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("type");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => new { e.Codcliente, e.Ruc }).HasName("PK_cliente1_1");

            entity.ToTable("cliente");

            entity.Property(e => e.Codcliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcliente");
            entity.Property(e => e.Ruc)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ruc");
            entity.Property(e => e.Codcia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Coduser)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Correomantenimiento)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("correomantenimiento");
            entity.Property(e => e.Correopago)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("correopago");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Extension1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("extension1");
            entity.Property(e => e.Extension2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("extension2");
            entity.Property(e => e.Fechacontfinal)
                .HasColumnType("datetime")
                .HasColumnName("fechacontfinal");
            entity.Property(e => e.Fechacontinicio)
                .HasColumnType("datetime")
                .HasColumnName("fechacontinicio");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.NombreMantenimiento)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombreMantenimiento");
            entity.Property(e => e.NombrePago)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombrePago");
            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Replegal)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("replegal");
            entity.Property(e => e.Telfclimanteni)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("telfclimanteni");
            entity.Property(e => e.Telfpago)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("telfpago");
            entity.Property(e => e.Tipo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<Contrato>(entity =>
        {
            entity.HasKey(e => e.Codcontrato);

            entity.ToTable("contrato");

            entity.Property(e => e.Codcontrato).HasColumnName("codcontrato");
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.Codcli)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcli");
            entity.Property(e => e.Codusercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercrea");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(1500)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Feccrea)
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.Fecfinal)
                .HasColumnType("datetime")
                .HasColumnName("fecfinal");
            entity.Property(e => e.Fecinicial)
                .HasColumnType("datetime")
                .HasColumnName("fecinicial");
        });

        modelBuilder.Entity<Cronograma>(entity =>
        {
            entity.HasKey(e => e.Codcrono).HasName("PK_crono1");

            entity.ToTable("cronograma");

            entity.Property(e => e.Codcrono)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("codcrono");
            entity.Property(e => e.Anio).HasColumnName("anio");
            entity.Property(e => e.Codagencia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codagencia");
            entity.Property(e => e.Codlocalidad)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codlocalidad");
            entity.Property(e => e.Codusercreacrono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercreacrono");
            entity.Property(e => e.Codusertecnic)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusertecnic");
            entity.Property(e => e.Dia).HasColumnName("dia");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Feccrea)
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.Fechamantenimiento)
                .HasColumnType("datetime")
                .HasColumnName("fechamantenimiento");
            entity.Property(e => e.IdRequer).HasColumnName("idRequer");
            entity.Property(e => e.Maquinasmanuales).HasColumnName("maquinasmanuales");
            entity.Property(e => e.Mes).HasColumnName("mes");
            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Semanainicio).HasColumnName("semanainicio");
        });

        modelBuilder.Entity<Cronograma1>(entity =>
        {
            entity.HasKey(e => e.Codcrono).HasName("PK_cronograma1_1");

            entity.ToTable("cronograma1");

            entity.Property(e => e.Codcrono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcrono");
            entity.Property(e => e.Anio).HasColumnName("anio");
            entity.Property(e => e.Codagencia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codagencia");
            entity.Property(e => e.Codlocalidad)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codlocalidad");
            entity.Property(e => e.Codusercreacrono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercreacrono");
            entity.Property(e => e.Codusertecnic)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusertecnic");
            entity.Property(e => e.Dia).HasColumnName("dia");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Feccrea)
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.Fechamantenimiento)
                .HasColumnType("datetime")
                .HasColumnName("fechamantenimiento");
            entity.Property(e => e.Maquinasmanuales).HasColumnName("maquinasmanuales");
            entity.Property(e => e.Mes).HasColumnName("mes");
            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Semanainicio).HasColumnName("semanainicio");
        });

        modelBuilder.Entity<DimDate>(entity =>
        {
            entity.HasKey(e => e.DateKey).HasName("PK__DimDate__40DF45E3F023E52E");

            entity.ToTable("DimDate");

            entity.Property(e => e.DateKey).ValueGeneratedNever();
            entity.Property(e => e.DayOfWeek)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MonthName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Entytrancab>(entity =>
        {
            entity.HasKey(e => e.Codtran).HasName("PK_entytrancab1_1");

            entity.ToTable("entytrancab");

            entity.Property(e => e.Codtran)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codtran");
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.Codbodent)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codbodent");
            entity.Property(e => e.Codbodsal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codbodsal");
            entity.Property(e => e.Codusercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercrea");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fecrea)
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.Nombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Serie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serie");
            entity.Property(e => e.Tipo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<Entytrandet>(entity =>
        {
            entity.HasKey(e => new { e.Codtrandet, e.Codtran }).HasName("PK_entytrandet1_1");

            entity.ToTable("entytrandet");

            entity.Property(e => e.Codtrandet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codtrandet");
            entity.Property(e => e.Codtran)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codtran");
            entity.Property(e => e.Codprod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codprod");
            entity.Property(e => e.Codusercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercrea");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
        });

        modelBuilder.Entity<FileControl>(entity =>
        {
            entity.ToTable("FileControl");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Coduser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Fecrea)
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.Tipo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<FileMediaTicket>(entity =>
        {
            entity.ToTable("fileMediaTicket");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.FileUrl)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("fileUrl");
            entity.Property(e => e.IdTicketRequerimiento).HasColumnName("idTicketRequerimiento");
            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Permisos).HasColumnName("permisos");
            entity.Property(e => e.Type)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("type");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<Garantia>(entity =>
        {
            entity.HasKey(e => e.Codgarantia).HasName("PK_garantias_1");

            entity.ToTable("garantias");

            entity.Property(e => e.Codgarantia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codgarantia");
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.Codfrec)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codfrec");
            entity.Property(e => e.Codtipomant)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codtipomant");
            entity.Property(e => e.Coduser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Descripcionbreve)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("descripcionbreve");
            entity.Property(e => e.Fecusercrea)
                .HasColumnType("datetime")
                .HasColumnName("fecusercrea");
            entity.Property(e => e.Nombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Tipo).HasColumnName("tipo");
        });

        modelBuilder.Entity<ImgFile>(entity =>
        {
            entity.HasKey(e => e.Codentidad).HasName("PK_imgFile1_1");

            entity.ToTable("imgFile");

            entity.Property(e => e.Codentidad)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codentidad");
            entity.Property(e => e.Imagen)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("imagen");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<Instituto>(entity =>
        {
            entity.HasKey(e => e.Codcia);

            entity.ToTable("instituto");

            entity.Property(e => e.Codcia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Correo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("correo");
            entity.Property(e => e.Cta1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cta1");
            entity.Property(e => e.Cta2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cta2");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.Email1)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("email1");
            entity.Property(e => e.Email2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("email2");
            entity.Property(e => e.FecCrea)
                .HasColumnType("datetime")
                .HasColumnName("fecCrea");
            entity.Property(e => e.HorasVinc).HasColumnName("horasVinc");
            entity.Property(e => e.Nombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Ruc)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("ruc");
            entity.Property(e => e.TelefA).HasColumnName("telef_a");
            entity.Property(e => e.TelfB).HasColumnName("telf_b");
            entity.Property(e => e.TelfC).HasColumnName("telf_c");
            entity.Property(e => e.Web)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("web");
        });

        modelBuilder.Entity<IntervalosTicket>(entity =>
        {
            entity.HasKey(e => e.IdIntervalo).HasName("PK_intervalosTicket1");

            entity.ToTable("intervalosTicket");

            entity.Property(e => e.IdIntervalo)
                .ValueGeneratedNever()
                .HasColumnName("idIntervalo");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.IdRequerimiento).HasColumnName("idRequerimiento");
            entity.Property(e => e.Mintime).HasColumnName("mintime");
            entity.Property(e => e.Tipo).HasColumnName("tipo");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<IntervalosTicketMsj>(entity =>
        {
            entity.HasKey(e => e.IdIntervaloMsj);

            entity.ToTable("intervalosTicketMsj");

            entity.Property(e => e.IdIntervaloMsj).HasColumnName("idIntervaloMsj");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.IdIntervalo).HasColumnName("idIntervalo");
            entity.Property(e => e.IdMensaje).HasColumnName("idMensaje");
        });

        modelBuilder.Entity<Invmov>(entity =>
        {
            entity.HasKey(e => e.Codmov).HasName("PK_invmov1_1");

            entity.ToTable("invmov");

            entity.Property(e => e.Codmov)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codmov");
            entity.Property(e => e.Codtrancab)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codtrancab");
            entity.Property(e => e.Feccrea)
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.Movcab)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("movcab");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Tipomov)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipomov");
        });

        modelBuilder.Entity<Localidad>(entity =>
        {
            entity.ToTable("localidad");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.NombreLocalidad)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombreLocalidad");
        });

        modelBuilder.Entity<Localidadcobertura>(entity =>
        {
            entity.HasKey(e => e.Idcoberturalocal);

            entity.ToTable("localidadcobertura");

            entity.Property(e => e.Idcoberturalocal).HasColumnName("idcoberturalocal");
            entity.Property(e => e.Codprovincia)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("codprovincia");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Idlocalidad).HasColumnName("idlocalidad");
        });

        modelBuilder.Entity<Mantemaqcro>(entity =>
        {
            entity.HasKey(e => e.Idmantenimiento).HasName("PK_mantemaqcro1");

            entity.ToTable("mantemaqcro");

            entity.Property(e => e.Idmantenimiento).HasColumnName("idmantenimiento");
            entity.Property(e => e.Codcrono)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("codcrono");
            entity.Property(e => e.Codprod)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("codprod");
            entity.Property(e => e.Codtecnico)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codtecnico");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Feccrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.Fecfinmant)
                .HasColumnType("datetime")
                .HasColumnName("fecfinmant");
            entity.Property(e => e.Feciniciomante)
                .HasColumnType("datetime")
                .HasColumnName("feciniciomante");
            entity.Property(e => e.Horafin).HasColumnName("horafin");
            entity.Property(e => e.Horainit).HasColumnName("horainit");
            entity.Property(e => e.IdRequer).HasColumnName("idRequer");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<Maquinarium>(entity =>
        {
            entity.HasKey(e => e.Codmaquina);

            entity.ToTable("maquinaria");

            entity.Property(e => e.Codmaquina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codmaquina");
            entity.Property(e => e.Codcia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Codigobp)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("codigobp");
            entity.Property(e => e.Codtipomaquina)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codtipomaquina");
            entity.Property(e => e.Codusercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codusercrea");
            entity.Property(e => e.Contadorfinal).HasColumnName("contadorfinal");
            entity.Property(e => e.Contadorinicial).HasColumnName("contadorinicial");
            entity.Property(e => e.DesccuentoAplicable)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("desccuentoAplicable");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Feccrea)
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.Marca)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("marca");
            entity.Property(e => e.Modelo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("modelo");
            entity.Property(e => e.Ninventario)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ninventario");
            entity.Property(e => e.Nserie)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nserie");
            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.PorcentajeVenta)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("porcentajeVenta");
            entity.Property(e => e.ValorCompra)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("valorCompra");
            entity.Property(e => e.Vidautil)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("vidautil");
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.HasKey(e => new { e.Codigotipomaq, e.Codmarca }).HasName("PK_modelo1");

            entity.ToTable("marca");

            entity.Property(e => e.Codigotipomaq)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("codigotipomaq");
            entity.Property(e => e.Codmarca)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codmarca");
            entity.Property(e => e.Nombremarca)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("nombremarca");
        });

        modelBuilder.Entity<MarcaRepuesto>(entity =>
        {
            entity.ToTable("marcaRepuestos");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CampoA)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("campoA");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.NombreMarcaRep)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombreMarcaRep");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<MasterTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MasterTable");

            entity.Property(e => e.Campo1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("campo1");
            entity.Property(e => e.Campo2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("campo2");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo");
            entity.Property(e => e.Gestion)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("gestion");
            entity.Property(e => e.Grupo)
                .HasMaxLength(70)
                .HasColumnName("grupo");
            entity.Property(e => e.Lencod)
                .HasColumnType("decimal(2, 0)")
                .HasColumnName("lencod");
            entity.Property(e => e.Master)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("master");
            entity.Property(e => e.Nombre)
                .HasMaxLength(200)
                .HasColumnName("nombre");
            entity.Property(e => e.Nomtag)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .IsFixedLength()
                .HasColumnName("nomtag");
            entity.Property(e => e.Pideval).HasColumnName("pideval");
            entity.Property(e => e.Sgrupo)
                .HasMaxLength(70)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sgrupo");
            entity.Property(e => e.Valor)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("valor");
            entity.Property(e => e.Valor2)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("VALOR2");
        });

        modelBuilder.Entity<MensajeriaTicket>(entity =>
        {
            entity.HasKey(e => e.Idmensaje);

            entity.ToTable("mensajeriaTicket");

            entity.Property(e => e.Idmensaje).HasColumnName("idmensaje");
            entity.Property(e => e.Active)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .HasColumnName("active");
            entity.Property(e => e.Coduser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Estado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("estado");
            entity.Property(e => e.Fechaemit)
                .HasColumnType("datetime")
                .HasColumnName("fechaemit");
            entity.Property(e => e.IdRequerimiento).HasColumnName("idRequerimiento");
            entity.Property(e => e.Mensaje)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("mensaje");
            entity.Property(e => e.UrlImagen)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("urlImagen");
        });

        modelBuilder.Entity<Mensajerium>(entity =>
        {
            entity.HasKey(e => e.Codigomensaje);

            entity.ToTable("mensajeria");

            entity.Property(e => e.Codigomensaje)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codigomensaje");
            entity.Property(e => e.Codremitente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codremitente");
            entity.Property(e => e.Coduser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Feccrea)
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.Mensaje)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("mensaje");
            entity.Property(e => e.Tipo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.Titulo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("titulo");
        });

        modelBuilder.Entity<Modelo>(entity =>
        {
            entity.HasKey(e => new { e.Codigotipomaq, e.Codmodelo, e.Codmarca }).HasName("PK_marca1_1");

            entity.ToTable("modelo");

            entity.Property(e => e.Codigotipomaq)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("codigotipomaq");
            entity.Property(e => e.Codmodelo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codmodelo");
            entity.Property(e => e.Codmarca)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codmarca");
            entity.Property(e => e.Nombremodelo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("nombremodelo");
        });

        modelBuilder.Entity<ModeloMarcaRepuesto>(entity =>
        {
            entity.ToTable("modeloMarcaRepuestos");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CampoA)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("campoA");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.IdMarcaRepuestos).HasColumnName("idMarcaRepuestos");
            entity.Property(e => e.NombreModeloRep)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombreModeloRep");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<ModuleMobile>(entity =>
        {
            entity.ToTable("module_mobile");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Codec)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codec");
            entity.Property(e => e.Color)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("color");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Icon)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("icon");
            entity.Property(e => e.Nombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Modulo>(entity =>
        {
            entity.ToTable("modulo");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Categoria)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("categoria");
            entity.Property(e => e.Codcia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Color)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("color");
            entity.Property(e => e.Icon)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("icon");
            entity.Property(e => e.ModuleDescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("moduleDescription");
            entity.Property(e => e.ModuleName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("moduleName");
        });

        modelBuilder.Entity<ModulosEstante>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ModulosEstantes1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Col)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("col");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.IdEstante).HasColumnName("idEstante");
            entity.Property(e => e.Row)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("row");
            entity.Property(e => e.TokenId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("tokenId");
        });

        modelBuilder.Entity<Prodbodegasigna>(entity =>
        {
            entity.HasKey(e => e.Codmaquinariabodega).HasName("PK_prodbodegasigna1_1");

            entity.ToTable("prodbodegasigna");

            entity.Property(e => e.Codmaquinariabodega).HasColumnName("codmaquinariabodega");
            entity.Property(e => e.Codbodega).HasColumnName("codbodega");
            entity.Property(e => e.Codcia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Codmaquinaria)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codmaquinaria");
            entity.Property(e => e.Coduser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fecrea)
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
        });

        modelBuilder.Entity<ProductosMedicamento>(entity =>
        {
            entity.HasKey(e => e.IdMedicamento).HasName("PK_productos_medicamentos1_1");

            entity.ToTable("productos_medicamentos");

            entity.Property(e => e.IdMedicamento).HasColumnName("idMedicamento");
            entity.Property(e => e.CantidadStock).HasColumnName("cantidadStock");
            entity.Property(e => e.Categoria)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("categoria");
            entity.Property(e => e.Codcia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.CodigoBarras)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codigoBarras");
            entity.Property(e => e.Concentracion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("concentracion");
            entity.Property(e => e.ContNeto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("contNeto");
            entity.Property(e => e.Contraindicaciones)
                .IsUnicode(false)
                .HasColumnName("contraindicaciones");
            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("descuento");
            entity.Property(e => e.EfectosSecundarios)
                .IsUnicode(false)
                .HasColumnName("efectosSecundarios");
            entity.Property(e => e.FecRegistroSistema)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecRegistroSistema");
            entity.Property(e => e.FechaCaducidad)
                .HasColumnType("datetime")
                .HasColumnName("fechaCaducidad");
            entity.Property(e => e.FechaFabricacion)
                .HasColumnType("datetime")
                .HasColumnName("fechaFabricacion");
            entity.Property(e => e.FormaFarmaceutica)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("formaFarmaceutica");
            entity.Property(e => e.IdPuntoVenta).HasColumnName("idPuntoVenta");
            entity.Property(e => e.ImagenProducto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("imagenProducto");
            entity.Property(e => e.Indicaciones)
                .IsUnicode(false)
                .HasColumnName("indicaciones");
            entity.Property(e => e.InstruccionesUso)
                .IsUnicode(false)
                .HasColumnName("instruccionesUso");
            entity.Property(e => e.LaboratorioFabricante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("laboratorioFabricante");
            entity.Property(e => e.Lote)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lote");
            entity.Property(e => e.MinimoStock).HasColumnName("minimoStock");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.OImp)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("oImp");
            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.PaisOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("paisOrigen");
            entity.Property(e => e.PrecioCompra)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precioCompra");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precioUnitario");
            entity.Property(e => e.Presentacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("presentacion");
            entity.Property(e => e.PrincipioActivo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("principioActivo");
            entity.Property(e => e.RegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("registroSanitario");
            entity.Property(e => e.RequiereReceta).HasColumnName("requiereReceta");
            entity.Property(e => e.TemperaturaAlmacenamiento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("temperaturaAlmacenamiento");
            entity.Property(e => e.TipoMedicamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipoMedicamento");
            entity.Property(e => e.UbicacionAlmacen)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ubicacionAlmacen");
            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("unidadMedida");
            entity.Property(e => e.UserRegister)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userRegister");
            entity.Property(e => e.ValorBlister)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("valorBlister");
            entity.Property(e => e.ValorCaja)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("valorCaja");
            entity.Property(e => e.ViaAdministracion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("viaAdministracion");
        });

        modelBuilder.Entity<PuntoDeVentaEstante>(entity =>
        {
            entity.ToTable("punto_de_venta_estante");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CajonesEstante).HasColumnName("cajonesEstante");
            entity.Property(e => e.CodigoPrefijo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigoPrefijo");
            entity.Property(e => e.ColumnasEstantes).HasColumnName("columnasEstantes");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.IdPuntoVenta).HasColumnName("idPuntoVenta");
            entity.Property(e => e.PisosEstantes).HasColumnName("pisosEstantes");
            entity.Property(e => e.TagDescription)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("tagDescription");
            entity.Property(e => e.TokenId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tokenId");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<PuntoDeVentum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_punto_de_venta2");

            entity.ToTable("punto_de_venta");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CodCanton)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cod_canton");
            entity.Property(e => e.CodCia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("cod_cia");
            entity.Property(e => e.CodProv)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cod_prov");
            entity.Property(e => e.Direccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.NombrePuntoVenta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre_punto_venta");
            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("telefono");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<Repbodasigna>(entity =>
        {
            entity.HasKey(e => e.Codrepbodega).HasName("PK_prodrepasigna1");

            entity.ToTable("repbodasigna");

            entity.Property(e => e.Codrepbodega).HasColumnName("codrepbodega");
            entity.Property(e => e.Codbodega).HasColumnName("codbodega");
            entity.Property(e => e.Codrep)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codrep");
            entity.Property(e => e.Coduser)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
        });

        modelBuilder.Entity<Repuesto>(entity =>
        {
            entity.HasKey(e => e.Codrep).HasName("PK_repuestos1");

            entity.ToTable("repuestos");

            entity.Property(e => e.Codrep)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codrep");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.CantRep).HasColumnName("cantRep");
            entity.Property(e => e.CodTipoMaquina)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codTipoMaquina");
            entity.Property(e => e.Codcia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("codcia");
            entity.Property(e => e.Codigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.DesccuentoAplicable)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("desccuentoAplicable");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.Marca)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("marca");
            entity.Property(e => e.MarcaRep).HasColumnName("marcaRep");
            entity.Property(e => e.Modelo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("modelo");
            entity.Property(e => e.NombreRep)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombreRep");
            entity.Property(e => e.PorcentajeVenta)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("porcentajeVenta");
            entity.Property(e => e.UrlimagenA)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("urlimagenA");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("usercrea");
            entity.Property(e => e.ValorCompra)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("valorCompra");
            entity.Property(e => e.Vidautil)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("vidautil");
        });

        modelBuilder.Entity<ResumenMantenimiento>(entity =>
        {
            entity.ToTable("resumenMantenimiento");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CodResuMante)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codResuMante");
            entity.Property(e => e.EstadoEquip)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("estadoEquip");
            entity.Property(e => e.Fecrea)
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.IdRequerimiento).HasColumnName("idRequerimiento");
            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.SolucionImplementada)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("solucionImplementada");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("usercrea");
            entity.Property(e => e.Valor)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("valor");
        });

        modelBuilder.Entity<TicketRequerimiento>(entity =>
        {
            entity.HasKey(e => e.IdTicket).HasName("PK_ticketRequerimiento1_1");

            entity.ToTable("ticketRequerimiento");

            entity.Property(e => e.IdTicket).HasColumnName("idTicket");
            entity.Property(e => e.Area)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Beneficiario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("beneficiario");
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.Ciudad)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ciudad");
            entity.Property(e => e.CodMarca)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("codMarca");
            entity.Property(e => e.CodModelo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("codModelo");
            entity.Property(e => e.CodTipoEquipo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("codTipoEquipo");
            entity.Property(e => e.Codprov)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codprov");
            entity.Property(e => e.DescripcionProblema)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("descripcionProblema");
            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EspacioSirve)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("espacioSirve");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.FechafinPlanif)
                .HasColumnType("datetime")
                .HasColumnName("fechafinPlanif");
            entity.Property(e => e.FechainiPlanif)
                .HasColumnType("datetime")
                .HasColumnName("fechainiPlanif");
            entity.Property(e => e.Fecrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecrea");
            entity.Property(e => e.FecreaRealFin)
                .HasColumnType("datetime")
                .HasColumnName("fecreaRealFin");
            entity.Property(e => e.FecreaRealIni)
                .HasColumnType("datetime")
                .HasColumnName("fecreaRealIni");
            entity.Property(e => e.HoraFinalPlanificada)
                .HasPrecision(2)
                .HasColumnName("horaFinalPlanificada");
            entity.Property(e => e.HoraFinalReal)
                .HasPrecision(2)
                .HasColumnName("horaFinalReal");
            entity.Property(e => e.HoraInicialPlanificada)
                .HasPrecision(2)
                .HasColumnName("horaInicialPlanificada");
            entity.Property(e => e.HoraInicialReal)
                .HasPrecision(2)
                .HasColumnName("horaInicialReal");
            entity.Property(e => e.IdAgencia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("idAgencia");
            entity.Property(e => e.MotivoTrabajo)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasColumnName("motivoTrabajo");
            entity.Property(e => e.NserieEquipo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nserieEquipo");
            entity.Property(e => e.Observacion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Telefono)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("telefono");
            entity.Property(e => e.Tipo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("url");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("usercrea");
            entity.Property(e => e.Valor)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("valor");
        });

        modelBuilder.Entity<Ticketresolucion>(entity =>
        {
            entity.HasKey(e => e.IdRequerimiento).HasName("PK_ticketresolucion1_1");

            entity.ToTable("ticketresolucion");

            entity.Property(e => e.IdRequerimiento).HasColumnName("idRequerimiento");
            entity.Property(e => e.CodMaquina)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codMaquina");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fechacrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fechacrea");
            entity.Property(e => e.Idagencia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("idagencia");
            entity.Property(e => e.MensajeDelProblema)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensajeDelProblema");
            entity.Property(e => e.Obervacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("obervacion");
            entity.Property(e => e.Tipo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo");
            entity.Property(e => e.UrlA)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("urlA");
            entity.Property(e => e.UrlB)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("urlB");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.Coduser).HasName("PK_usuarios");

            entity.ToTable("usuario");

            entity.Property(e => e.Coduser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Apellido)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Cargo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cargo");
            entity.Property(e => e.Cedula)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cedula");
            entity.Property(e => e.CodCanton)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codCanton");
            entity.Property(e => e.CodCia)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("codCia");
            entity.Property(e => e.CodDepartamento)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codDepartamento");
            entity.Property(e => e.CodEstadoCivil)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codEstadoCivil");
            entity.Property(e => e.CodLicencia)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codLicencia");
            entity.Property(e => e.CodProvincia)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codProvincia");
            entity.Property(e => e.CodSexo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codSexo");
            entity.Property(e => e.Codcaracteristicas)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("codcaracteristicas");
            entity.Property(e => e.Contrasenia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("contrasenia");
            entity.Property(e => e.Direccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.Edad).HasColumnName("edad");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Estado)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("estado");
            entity.Property(e => e.Fecingreso)
                .HasColumnType("datetime")
                .HasColumnName("fecingreso");
            entity.Property(e => e.Fecsalida)
                .HasColumnType("datetime")
                .HasColumnName("fecsalida");
            entity.Property(e => e.Movilidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("movilidad");
            entity.Property(e => e.Nombre)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Rol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rol");
            entity.Property(e => e.Telf)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("telf");
            entity.Property(e => e.Tipo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.TipoCapacidad)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipoCapacidad");
            entity.Property(e => e.Valoracion).HasColumnName("valoracion");
        });

        modelBuilder.Entity<UsuarioPortalTicket>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UsuarioPortalTicket1");

            entity.ToTable("UsuarioPortalTicket");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A");
            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.Coduser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("coduser");
            entity.Property(e => e.Correo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdCliente)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("idCliente");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Rol)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Usuario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VentasposCab>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ventaspos");

            entity.ToTable("ventasposCab");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Ccia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ccia");
            entity.Property(e => e.CodMetodoPago)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codMetodoPago");
            entity.Property(e => e.Codcli)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("codcli");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.EstadoPrint).HasColumnName("estadoPrint");
            entity.Property(e => e.Feccrea)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("feccrea");
            entity.Property(e => e.IdProcesoApertura).HasColumnName("idProcesoApertura");
            entity.Property(e => e.IdPuntoVenta).HasColumnName("idPuntoVenta");
            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("observacion");
            entity.Property(e => e.Subtotal)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("subtotal");
            entity.Property(e => e.TotalIva)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("totalIva");
            entity.Property(e => e.Usercrea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("usercrea");
        });

        modelBuilder.Entity<VentasposDet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ventasposDet1_1");

            entity.ToTable("ventasposDet");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.Codprod).HasColumnName("codprod");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.IdCab).HasColumnName("idCab");
            entity.Property(e => e.Pvp)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("pvp");
        });

        modelBuilder.Entity<VersionCm>(entity =>
        {
            entity.HasKey(e => e.Version);

            entity.ToTable("versionCMS");

            entity.Property(e => e.Version)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("version");
            entity.Property(e => e.Fechafinal)
                .HasColumnType("datetime")
                .HasColumnName("fechafinal");
            entity.Property(e => e.Fechainicial)
                .HasColumnType("datetime")
                .HasColumnName("fechainicial");
            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("observacion");
        });

        modelBuilder.Entity<Versionamiento>(entity =>
        {
            entity.ToTable("versionamiento");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Fechafinal)
                .HasColumnType("datetime")
                .HasColumnName("fechafinal");
            entity.Property(e => e.Fechamodular)
                .HasColumnType("datetime")
                .HasColumnName("fechamodular");
            entity.Property(e => e.Nombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Version)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("version");
        });

        modelBuilder.Entity<VwCalendar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Calendar");

            entity.Property(e => e.DayOfWeek)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MonthName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}